
name: Publish


on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PORT: 6550
  USERNAME: ec2-user
    
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Waiting for cluster to be ready
        run: |
            HOST=`aws ec2 describe-instances --filters 'Name=tag:Name,Values=homolog-minimal-otlp'   --output text --query 'Reservations[*].Instances[*].PublicIpAddress'`
            while ! nc -z $HOST $PORT; do
              echo "waiting for cluster to be ready..."
              sleep 2
            done
            echo "Cluster Ready!"
            echo "Host=$HOST" >> $GITHUB_ENV
            
      - name: Write secret to file
        run: |
          echo "${{ secrets.KEYPAIR }}" > cert.pem
          chmod 600 cert.pem

      - name: Generate kube config with k3d
        run: |
            ssh -i ./cert.pem -o StrictHostKeyChecking=no $USERNAME@${{ env.Host }} "k3d kubeconfig get k3s > config"

      - name: Download kube config
        run: |
           mkdir -p ~/.kube
           scp -i ./cert.pem -o StrictHostKeyChecking=no $USERNAME@${{ env.Host }}:config ~/.kube/config

      - name: Print downloaded config
        run: |  
          CERTIFICATE=`cat  ~/.kube/config |grep certificate-authority-data `
          sed -i "s|$CERTIFICATE|    insecure-skip-tls-verify: true|g" ~/.kube/config
          sed -i "s|0.0.0.0|${{  env.Host  }}|g" ~/.kube/config  

      - name: Check grafana url
        run: |
          export GRAFANA_URL=https://grafana.homolog-central-otlp.vkpr.platform.vee.codes
          echo "CHECKED_URL=${GRAFANA_URL%/}"
          echo "CHECKED_URL=${GRAFANA_URL%/}" >> $GITHUB_ENV
          mkdir dashboards

      - name: Getting uid from Jaeger datasource
        run: |
          export UID_TRACE_DASHBOARD=$(curl -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" --url ${{ env.CHECKED_URL }}/api/datasources | jq '.[] | select(.type == "jaeger")'.uid)
          echo "UID_TRACE = $UID_TRACE_DASHBOARD" 
          echo "UID_TRACE=$UID_TRACE_DASHBOARD" >> $GITHUB_ENV

      - name: Getting uid from Loki datasource
        run: |
          export UID_LOG_DASHBOARD=$(curl -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" --url ${{ env.CHECKED_URL }}/api/datasources | jq '.[] | select(.type == "loki")'.uid)
          echo "UID_LOG = $UID_LOG_DASHBOARD"
          echo "UID_LOG=$UID_LOG_DASHBOARD" >> $GITHUB_ENV

      - name: Getting uid from Prometheus datasource
        run: |
          export UID_METRICS_DASHBOARD=$(curl -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" --url ${{ env.CHECKED_URL }}/api/datasources | jq '.[] | select(.type == "prometheus")'.uid)
          echo "UID_METRICS = $UID_METRICS_DASHBOARD" 
          echo "UID_METRICS=$UID_METRICS_DASHBOARD" >> $GITHUB_ENV
      - name: Apply k8s
        run: |
          kubectl apply -f ./k8s/k8s.yaml -n vkpr --validate=false

      - name: Changing uid of dashboard from K8s
        run: |
          jq '(.dashboard.panels[].datasource | select(.type == "prometheus")).uid |= ${{ env.UID_METRICS }}' "k8s/kong-metrics.json" > ./dashboards/k8s-kong-metrics.json
          jq '(.dashboard.panels[].datasource | select(.type == "jaeger")).uid |= ${{ env.UID_TRACE }}' "k8s/jaeger-trace.json" > ./dashboards/k8s-jaeger-trace.json
          jq '(.dashboard.panels[].datasource | select(.type == "loki")).uid |= ${{ env.UID_LOG }}' "k8s/loki-logs.json" > ./dashboards/k8s-loki-logs.json  

      - name: Deploy dashboards
        run: |
          for dashboard in ./dashboards/*.json; do
            echo "Deploying $dashboard"
            curl -k -X POST -d @$dashboard \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{  secrets.GRAFANA_API_TOKEN }}" \
              --url ${{ env.CHECKED_URL }}/api/dashboards/db
          done
